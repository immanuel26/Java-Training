Collection(I) :
    01) int size()                                = Returns the number of elements which are present on the collection.
    02) boolean isEmpty()                         = returns Returns false when it is not empty.
    03) void clear()                              = To remove all the object from collection.
    04) boolean contains(Object obj)              = A particular object is present on the collection.
    05) boolean containsAll(Collection obj)       = A particular object is present on the collection.
    06) Object[] toArray()                        = Convert Collection to Array.
    07) boolean add(Object obj)                   = Returns true if the object is added to the collection.
    08) boolean addAll(Collection collection)     = To add one collection to other collection.
    09) boolean remove(Object obj)                = Returns true if the object is removed from the collection.
    10) boolean removeAll(Collection c)           = To remove one set of object from collection.
    11) boolean retainAll(Collection c)           = To remove except passed collection.
    12) default Stream<E> stream()                = To convert Collection to Stream Object.

List(I) :
    01) boolean add(int index, Object obj);       = To add a particular object on a particular index.
    02) boolean addAll(int index, Collection c);  = To add a Collection on a particular index.
    03) Object remove(int index)                  = When we want to remove an object on specific index.
    04) Object get(int index);                    = This method will return an object which is present on passed index.
    05) Object set(int index, Object obj)         = To replace the object on specific index.
    06) int index(Object obj);                    = This method will return the index of passed Object.
    07) int lastIndexOf(Object obj)               = Method will return the last occurence of specific Object.
    08) ListIterator listIterator();

Vector :
    01) add(Object obj); Collection.
    02) add(int index, Object obj); List.
    03) addElement(Object obj); Vector
    04) remove(Object obj); Collection.
    05) removeElement(Object obj); Vector.
    06) remove(int index); List.
    07) removeElementAt(int index);
    08) clear(); Collection.
    09) removeAllElements(); Vector.
    10) get(int index); List
    11) elementAt(int index); Vector
    12) firstElement(); Vector.
    13) listElement(); Vector.
    14) int size();
    15) int capacity();

Use Case : If our requirement is index based operations, Then we choose List type.
                  => Duplicates are allowed.
                  => Insertion order is important.

The Implementation classes for List are
    01) ArrayList(C).
    02) LinkedList.
    03) Vector.
            -Stack.

ArrayList(C) :
    01) List<String> list = new ArrayList<>();
            -> Creates empty ArrayList with size 10.
            -> Once the ArrayList reaches maximum capacity, A new ArrayList will created with
                       int new capacity = (currentCapacity * 3/2 +1)

    02) List<String> list = new ArrayList<>(int initialSize);
            -> ArrayList will be created with specified size.

    03) List<String> list = new ArrayList<>(Collection collection);
            -> Converts Collection type to ArrayList

Linkedlist(C) :
    01) Data will insert on insertion order.
    02) Duplicate object are allowed.
    03) We insert null
        PROS : Deleting and updating operations.
        CONS : Reading the data.
            -> List<String> linkedlist = new LinkedList<>();
            -> List<String> linkedlist = new LinkedList<>(COllection collection);

Stack :
      Its Child class of vector.
      Stack stack = new Stack();

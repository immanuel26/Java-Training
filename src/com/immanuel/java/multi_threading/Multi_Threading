Multi Threading :

JDK 1.0
       => Main Thread -> main() method.

1) Runnable(Interface) :
       -> This is an interface which is present in java.lang package since JAVA born.
       -> Runnable interface is Functional interface (It has exactly one abstract method.
                a) Write a class/anonymous inner class/Lambda expression which implements Runnable interface.
                b) Create Thread object by passing Runnable object as an argument.
                c) Call start() on thread object
                         ->Runnable runnable = new MyRunnable();
                         ->Thread thread = new Thread(runnable);
                         ->thread.start();

2) Thread(Class) :
       -> Thread is a class which is present in java.lang package.
                a) Write a class which extends Thread class.
                b) Define task inside run().
                         Thread thread = new threadDemo();
                         thread.start();

NOTE : In both approaches we should not call run() directly. We should always start() on Thread class.
       start() will internally calls run() method.

                        start()                   VS                  run()
1) start() has the logic to create a new thread         1) run() is for task execution/business logic.
2) We should not override start().                      2) Its mandatory to overriding run().
3) To create and start new thread we should always      3) We should not call run method from our code,
   call start() method.                                    run() is callback method, it will
                                                           automatically called by start().

Issue :
       -> One thread can execute one task.
       -> Threads re-usability is missing.
       -> run() no input and no output.
       -> No update on task completion.
       -> We cant cancel the task once it submitted.